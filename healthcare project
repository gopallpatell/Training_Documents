provider "aws" {
  region     = "ap-south-1"
  access_key = "AKIA3FLD4TTVLD4V5MXF"
  secret_key = "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"
}


variable "server_names" {
  default = ["Master-of-Master", "Jenkins-SAlave-Node", "Test-Server", "Monitering-Server"]
}

# Create VPC

resource "aws_vpc" "myvpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "myvpc"
  }
}

# Create Subnet 

resource "aws_subnet" "mysubnet" {
  vpc_id     = aws_vpc.myvpc.id
  availability_zone = "ap-south-1a"
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "mysubnet"
  }
}

# Internet Gateway

resource "aws_internet_gateway" "mygw" {
  vpc_id = aws_vpc.myvpc.id

  tags = {
    Name = "mygw"
  }
}

# Route Table

resource "aws_route_table" "myrt" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.mygw.id
  }

  tags = {
    Name = "myrt"
  }
}

# Route Table Association

resource "aws_route_table_association" "myrta" {
  subnet_id      = aws_subnet.mysubnet.id
  route_table_id = aws_route_table.myrt.id
}

# Security Groups

resource "aws_security_group" "mysg" {
  name        = "mysg"
  description = "Allow All traffic"
  vpc_id      = aws_vpc.myvpc.id

   ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"        # -1 means all protocols
    cidr_blocks = ["0.0.0.0/0"]
  }

egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  

  tags = {
    Name = "mysg"
  }
}

# Create Instance

resource "aws_instance" "servers"{
  for_each      =   toset(var.server_names) 
  ami           = "ami-09b0a86a2c84101e1"
  instance_type = "t2.medium"
  associate_public_ip_address = true
  subnet_id = aws_subnet.mysubnet.id
  vpc_security_group_ids = [aws_security_group.mysg.id]
  key_name = "gp"
  
  tags = {
    Name = each.key
  }
}

################################################## MOM ##########################################################3


su

vi master-server.sh 

  #!/bin/bash

  echo "installing java"

  apt update -y
  apt install git -y
  apt install openjdk-17-jdk -y
  apt install maven -y

  echo "java Installed"

  echo "installing docker"

  apt install docker.io -y

  echo "Docker Installed"

  echo "installing java"

  echo "installing ansible"
  sudo apt update
  sudo apt install software-properties-common
  sudo add-apt-repository --yes --update ppa:ansible/ansible
  sudo apt install ansible -y

  echo "installing jenkins"
  sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins -y
  
  
 sh master-server.sh
  
##add docker to jenkins group

sudo usermod -aG docker jenkins

sudo systemctl restart jenkins

reboot instance
  

access jenkins thru browser 




########################################### slave node ##################################################

#Configure Slave Node1 for Java Maven App. :


sudo -i

apt update -y 

Install Java ::

sudo apt update -y 
sudo apt install openjdk-17-jre -y
java -version						

Install GIT :

sudo apt install git -y

Install Maven - Build Tool :

sudo apt install maven -y 

Create User in Jenkins Slave Machine & Create SSH Keys 

SSH Keys --> is composed of public and private keys 

#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				


ls ~/.ssh 

#You should see following two files:

#id_ecdsa - private key
#id_ecdsa.pub - public


#cat id_rsa.pub > authorized_keys

cat id_ecdsa.pub > authorized_keys

chmod 600 /home/devopsadmin/.ssh/*

	

Login to Jenkins - Manage Jenkins - Attach the Slave Node to jenkins Master

	Goto to Manage Jenkins 
		Select Nodes 
			On Nodes Dashboard, Click on New Node
				Give Node Name, and choose permanent agent.



  


















